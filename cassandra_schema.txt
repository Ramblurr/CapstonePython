Queries we want to do
date range
multiple symbols with same date range
partial symbol lookup (symbol range)
symbol and date range



OLD SCHEMA:
connect localhost/9160;
create keyspace NASDAQ;
use NASDAQ;
create column family Stocks with comparator=UTF8Type 
and column_metadata=[{column_name: symbol, validation_class: UTF8Type, index_type: KEYS}
{column_name: date, validation_class: LongType, index_type: KEYS}];


NEW SCHEMA:
create column family Stocks2 with comparator=UTF8Type and column_type=Super and subcomparator=UTF8Type;

Symbol {
  Date 1 {
    open:
    close:
    ...
  }
  Date 2 {
    open:
    close:
    ...
  }
  ...
}

Date {
  Symbol 1 {
    open: 
    close:
    ...
  }
  Symbol 2 {
    open: 
    close:
    ...
  }
  ...
}

example:
GOOG {
 2005/01/01 {
    open: 500,
    close: 501
 }
 2005/01/02 {
    open: 501,
    close: 502
 }
}

2005/01/01 {
  GOOG{
    open: 501,
    close: 502
 }
  AAPL {
    open: 501,
    close: 502
 }
}

Stock Symbol Column Family:

create column family StockSymbols with comparator=UTF8Type;

http://ria101.wordpress.com/2010/02/22/cassandra-randompartitioner-vs-orderpreservingpartitioner/
Well, first of all there is a really simple if brutal solution: simply store your index inside a single column family row as a series of columns. Since Cassandra can in principle cope with millions of columns, this is perfectly possible. Although it is true each index won’t be distributed across your whole cluster, the load will at the least be distributed across the nodes holding the replicas. If you use a typical replication factor (RF) of 3 the load associated with each index will be shared by 3 nodes etc.

In the vast majority of cases, this will be enough, and it will be sufficient that the rest of your data is properly balanced across your cluster.

But, I hear you saying, this is too brutal. Your index is too massive to fit on 3 nodes, is extremely hot and this just won’t work. You moved to Cassandra because you want your load distributed across your entire cluster. Period.

This is a perfectly reasonably point of view.

Names {
  AAAA


  ZZZZ
}

A {
   AAAA: "Alpha Awesome Aardark Animal"
   ABAA: ""
   ABXA: ""
   ACCC: ""
   ...
}

...
G {
  GOOG: "Google"
  GOGO: ""
  ...
}

Example partial query
from: GOA 
GO
GOOG
GOGO
to: GP